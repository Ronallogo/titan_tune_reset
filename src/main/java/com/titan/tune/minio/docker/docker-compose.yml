version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: titan-postgres
    environment:
      POSTGRES_DB: titan_tunes
      POSTGRES_USER: titan_user
      POSTGRES_PASSWORD: titan_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - titan-network
    restart: unless-stopped

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: titan-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
      MINIO_BROWSER_REDIRECT_URL: http://localhost:9001
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console Web UI
    volumes:
      - minio_data:/data
    networks:
      - titan-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # MinIO Client pour initialiser les buckets
  minio-init:
    image: minio/mc:latest
    container_name: titan-minio-init
    depends_on:
      - minio
    networks:
      - titan-network
    entrypoint: >
      /bin/sh -c "
      sleep 10;
      /usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin123;
      /usr/bin/mc mb myminio/titan-songs --ignore-existing;
      /usr/bin/mc mb myminio/titan-images --ignore-existing;
      /usr/bin/mc mb myminio/titan-videos --ignore-existing;
      /usr/bin/mc mb myminio/titan-photos --ignore-existing;
      /usr/bin/mc policy set public myminio/titan-songs;
      /usr/bin/mc policy set public myminio/titan-images;
      /usr/bin/mc policy set public myminio/titan-videos;
      /usr/bin/mc policy set public myminio/titan-photos;
      echo 'MinIO buckets created successfully';
      "

  # Redis Cache (optionnel)
  redis:
    image: redis:7-alpine
    container_name: titan-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - titan-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Application Spring Boot
  titan-app:
    build:
      context: ../../../../../../../..
      dockerfile: Dockerfile
    container_name: titan-tunes-app
    depends_on:
      - postgres
      - minio
      - redis
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/titan_tunes
      SPRING_DATASOURCE_USERNAME: titan_user
      SPRING_DATASOURCE_PASSWORD: titan_password
      MINIO_URL: http://minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "8081:8081"
    volumes:
      - app_logs:/app/logs
    networks:
      - titan-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/api/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  minio_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local

networks:
  titan-network:
    driver: bridge
